[{"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/index.js":"1","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/reportWebVitals.js":"2","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/App.js":"3","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/pages/root/index.js":"4","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/layouts/commonLayout/index.js":"5","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/atoms/NavItem/index.js":"6","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/pages/game/index.js":"7","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/molecules/UserHeader/index.js":"8","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/UserContext.js":"9","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/pages/signin/index.js":"10","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/constants/utils.js":"11","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/pages/signin/graphql.js":"12","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/pages/playlists/index.js":"13","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/pages/top-tracks/index.js":"14","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/organisms/OldLobby/index.js":"15","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/molecules/LobbyManager/index.js":"16","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/molecules/LobbyHeader/index.js":"17","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/molecules/GameManager/index.js":"18","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/contexts/NotificationContext/index.js":"19","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/contexts/NotificationContext/NotificationContext.js":"20","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/contexts/GameNotificationContext/GameNotificationContext.js":"21","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/contexts/GameNotificationContext/index.js":"22","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/atoms/LinkWithCopy/index.js":"23","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/pages/signup/index.js":"24","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/pages/signup/graphql.js":"25"},{"size":500,"mtime":1607877985804,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1607877985806,"results":"28","hashOfConfig":"27"},{"size":7785,"mtime":1609714671843,"results":"29","hashOfConfig":"27"},{"size":1079,"mtime":1609590673451,"results":"30","hashOfConfig":"27"},{"size":4112,"mtime":1609714249302,"results":"31","hashOfConfig":"27"},{"size":212,"mtime":1609698061678,"results":"32","hashOfConfig":"27"},{"size":307,"mtime":1607886712246,"results":"33","hashOfConfig":"27"},{"size":1512,"mtime":1609714160329,"results":"34","hashOfConfig":"27"},{"size":1002,"mtime":1607898751975,"results":"35","hashOfConfig":"27"},{"size":2146,"mtime":1607900636106,"results":"36","hashOfConfig":"27"},{"size":1908,"mtime":1607899169262,"results":"37","hashOfConfig":"27"},{"size":321,"mtime":1607899200666,"results":"38","hashOfConfig":"27"},{"size":622,"mtime":1609284645435,"results":"39","hashOfConfig":"27"},{"size":593,"mtime":1609284065621,"results":"40","hashOfConfig":"27"},{"size":868,"mtime":1609517767935,"results":"41","hashOfConfig":"27"},{"size":21213,"mtime":1609712971473,"results":"42","hashOfConfig":"27"},{"size":2490,"mtime":1609723770775,"results":"43","hashOfConfig":"27"},{"size":13587,"mtime":1609710747065,"results":"44","hashOfConfig":"27"},{"size":92,"mtime":1609603796523,"results":"45","hashOfConfig":"27"},{"size":1436,"mtime":1609705003465,"results":"46","hashOfConfig":"27"},{"size":1472,"mtime":1609705012589,"results":"47","hashOfConfig":"27"},{"size":106,"mtime":1609604967756,"results":"48","hashOfConfig":"27"},{"size":921,"mtime":1609706785913,"results":"49","hashOfConfig":"27"},{"size":599,"mtime":1609715004975,"results":"50","hashOfConfig":"27"},{"size":321,"mtime":1609714623906,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"drosag",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/index.js",[],["110","111"],"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/reportWebVitals.js",[],"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/App.js",["112","113","114","115","116"],"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/pages/root/index.js",["117"],"import React from \"react\";\nimport useAxios from \"axios-hooks\";\n\nimport Lobby from \"../../components/organisms/OldLobby\";\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Lobby</h1>\n      <Lobby />\n      {/* <PlaylistList /> */}\n      <TrackList playlistId={\"6Nqy9X5VFl203IMoe38sMz\"} />\n      {/* <TrackPreview trackId={\"4fixebDZAVToLbUCuEloa2\"} /> */}\n    </div>\n  );\n}\n\nfunction TrackList({ playlistId }) {\n  const [{ loading, data, error }, refetch] = useAxios({\n    url: `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,\n    headers: {\n      Authorization:\n        \"Bearer BQCewY3WAfYQrsSEOmW57BlHoUinFTE3yRPcSgMQwl5O4MQdIbNZNLTlWGG0anarKSH4tyKihrmx-WUL5SzAfcEZf2d9uk9Ph0gGBYrQVLDuJk3HMLWZdqtMIy_JXtyeezfKZBqT-Oi9\",\n    },\n  });\n\n  if (loading) return null;\n  if (error) return <p>Error: {JSON.stringify(error.response.data.error)}</p>;\n  if (!data) return <p>Uncatched error (but no data)</p>;\n\n  return (\n    <ul>\n      {data.items.map((item) => (\n        <li>\n          {item.track.id}: {item.track.name}\n        </li>\n      ))}\n    </ul>\n  );\n}\n","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/layouts/commonLayout/index.js",["118","119","120","121","122","123","124"],"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/atoms/NavItem/index.js",[],"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/pages/game/index.js",[],"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/molecules/UserHeader/index.js",["125"],"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/UserContext.js",[],"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/pages/signin/index.js",["126","127","128"],"import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useApolloClient } from \"@apollo/client\";\nimport jwtDecode from \"jwt-decode\";\n\nimport { getValueFromLocalStorage, saveTokens } from \"../../constants/utils\";\nimport userContext, {\n  REDUCER_ACTIONS as USER_REDUCER_ACTIONS,\n} from \"../../components/UserContext\";\nimport { SIGNIN_QUERY } from \"./graphql\";\n\nexport default function Page() {\n  return (\n    <div>\n      <SigninForm />\n    </div>\n  );\n}\n\nexport function SigninForm({ location }) {\n  const { register, handleSubmit } = useForm();\n  const [error, setError] = useState(null);\n  const [done, setDone] = useState(false);\n  const apolloClient = useApolloClient();\n  const [user, userDispatch] = userContext();\n\n  const onSubmit = async (formData) => {\n    setError && setError(null);\n    try {\n      const { data } = await apolloClient.query({\n        query: SIGNIN_QUERY,\n        variables: {\n          email: formData.email,\n          password: formData.password,\n          refreshToken:\n            formData.refreshToken || getValueFromLocalStorage(\"refreshToken\"),\n        },\n        fetchPolicy: \"no-cache\",\n      });\n      if (data.authenticate.error) {\n        setError && setError(data.authenticate.error);\n        return;\n      }\n      const refreshToken = data.authenticate.refreshToken;\n      const accessToken = data.authenticate.accessToken;\n      const decodedToken = jwtDecode(accessToken);\n\n      userDispatch({\n        action: USER_REDUCER_ACTIONS.SIGN_IN,\n        user: decodedToken && decodedToken.identity,\n      });\n      saveTokens({ accessToken, refreshToken });\n      setDone && setDone(true);\n    } catch (e) {\n      setError && setError(e);\n      console.log(\"error:\", e);\n    }\n  };\n\n  return (\n    <form onSubmit={() => handleSubmit((data) => onSubmit(data))}>\n      <input\n        name=\"email\"\n        ref={register}\n        placeholder=\"Email address\"\n        type=\"text\"\n      />\n      <input\n        name=\"password\"\n        ref={register}\n        placeholder=\"Password\"\n        type=\"password\"\n      />\n      <input type=\"submit\" value=\"Sign in\" />\n    </form>\n  );\n}\n","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/constants/utils.js",[],"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/pages/signin/graphql.js",[],"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/pages/playlists/index.js",["129"],"import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { gql, useQuery } from \"@apollo/client\";\n\nexport default function Page() {\n  const { loading, data, error } = useQuery(gql`\n    query {\n      myPlaylists {\n        uuid\n        title\n      }\n    }\n  `);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {JSON.stringify(error)}</p>;\n\n  return (\n    <div style={{ marginTop: \"1rem\" }}>\n      <h1>Playlists </h1>\n      <ul>\n        {data &&\n          data.myPlaylists &&\n          data.myPlaylists.map((playlist) => <li>{playlist.name}</li>)}\n      </ul>\n    </div>\n  );\n}\n","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/pages/top-tracks/index.js",["130"],"import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { gql, useQuery } from \"@apollo/client\";\n\nexport default function Page() {\n  const { loading, data, error } = useQuery(gql`\n    query {\n      topTracks {\n        name\n      }\n    }\n  `);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {JSON.stringify(error)}</p>;\n\n  return (\n    <div style={{ marginTop: \"1rem\" }}>\n      <h1>Tracks </h1>\n      <ul>\n        {data &&\n          data.topTracks &&\n          data.topTracks.map((track) => <li>{track.name}</li>)}\n      </ul>\n    </div>\n  );\n}\n","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/organisms/OldLobby/index.js",["131","132"],"import React, { useState, useEffect } from \"react\";\n\nexport default function Lobby() {\n  const [users, setUsers] = useState([\n    { name: \"Martin\" },\n    { name: \"Léandre\" },\n    { name: \"Rémi\" },\n    { name: \"Ursula\" },\n  ]);\n\n  return (\n    <div>\n      <div>\n        <h3>Players</h3>\n        {users.map((user) => (\n          <div>- {user.name}</div>\n        ))}\n        <br />\n        <div>Invite link: ###</div>\n      </div>\n      <div>\n        <h3>Next game settings</h3>\n        <div>\n          Playlist:{\" \"}\n          <input\n            type=\"text\"\n            placeholder=\"https://spotify.com/playlist/UAZ4368842\"\n          />\n        </div>\n        <div>\n          Number of musics:{\" \"}\n          <input type=\"number\" placeholder=\"30\" defaultValue={30} />\n        </div>\n        <br></br>\n        <button>Start game</button>\n      </div>\n    </div>\n  );\n}\n","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/molecules/LobbyManager/index.js",["133","134","135","136","137","138","139","140","141","142","143","144"],"import {\n  useApolloClient,\n  gql,\n  useSubscription,\n  useQuery,\n} from \"@apollo/client\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, Redirect, Link } from \"react-router-dom\";\nimport useNotificationContext from \"../../contexts/NotificationContext/NotificationContext\";\nimport useUserContext from \"../../UserContext\";\nimport { LinkWithCopy } from \"../../atoms/LinkWithCopy\";\n\nimport \"./style.scss\";\n\nexport default function Component({ defaultJoinCode }) {\n  const params = useParams();\n  const [rendered, setRendered] = useState(<p>Loading...</p>);\n  const [joinCode, setJoinCode] = useState(defaultJoinCode);\n\n  useEffect(() => {\n    const localStorageCode = localStorage.getItem(\"currentLobbyJoinCode\");\n    if (params.joinCode) {\n      setJoinCode(params.joinCode);\n    } else if (localStorageCode) {\n      setJoinCode(localStorageCode);\n    }\n  }, [params]);\n\n  if (!joinCode) {\n    if (localStorage.getItem(\"currentLobbyJoinCode\")) return null;\n    else return <CreateLobbyButton />;\n  }\n\n  return (\n    <div>\n      <LobbyController joinCode={joinCode} />\n    </div>\n  );\n}\n\nconst Spinner = () => {\n  return (\n    <div className=\"spinner__display\">\n      <img\n        src={\"https://www.freeiconspng.com/uploads/spinner-icon-0.gif\"}\n        alt=\"\"\n        style={{ width: \"2rem\" }}\n      />\n    </div>\n  );\n};\n\nconst LobbyController = ({ joinCode }) => {\n  const { data, loading, error, refetch } = useQuery(\n    gql`\n      query Lobby($joinCode: String!) {\n        lobby(joinCode: $joinCode) {\n          uuid\n          joinCode\n          createdAt\n          nextGameSettings {\n            uuid\n            tracksToGuess\n            trackList {\n              name\n            }\n          }\n          users {\n            uuid\n            createdAt\n            name\n          }\n          games {\n            uuid\n            joinCode\n            endAt\n            startAt\n            createdAt\n            users {\n              uuid\n              name\n              createdAt\n              score\n            }\n            tracks {\n              name\n            }\n          }\n        }\n      }\n    `,\n    {\n      variables: {\n        joinCode: joinCode,\n      },\n      fetchPolicy: \"no-cache\",\n    }\n  );\n\n  if (loading || !data) return <Spinner />;\n  if (error)\n    return (\n      <>\n        <p>{JSON.stringify(error)}</p>\n        <CreateLobbyButton />\n      </>\n    );\n\n  return (\n    <>\n      <LobbyDisplay lobby={data.lobby} />\n      <LobbyEventProcessor lobby={data.lobby} refetch={refetch} />\n      <GamePrepareSection lobby={data.lobby} />\n    </>\n  );\n};\n\nconst LobbyDisplay = ({ lobby }) => {\n  const [user, _] = useUserContext();\n  const apolloClient = useApolloClient();\n  const [isPartOfLobby, setIsPartOfLobby] = useState(null);\n\n  useEffect(() => {\n    if (!lobby.users) return;\n    for (let i = 0; i < lobby.users.length; i++) {\n      if (lobby.users[i].uuid === user.data.userUuid) {\n        setIsPartOfLobby(true);\n        return;\n      }\n    }\n    setIsPartOfLobby(false);\n  }, [lobby.users, user.data.userUuid]);\n\n  if (!lobby) return null;\n  const currentLobbyJoinCode = localStorage.getItem(\"currentLobbyJoinCode\");\n\n  return (\n    <div className=\"lobby__section\">\n      {/* <p>Lobby UUID: {lobby.uuid}</p> */}\n      <h1>\n        Lobby{\" \"}\n        <LinkWithCopy\n          text={lobby.joinCode}\n          localUrl={`/lobby/${lobby.joinCode}`}\n          bigSize=\"2.5rem\"\n          smallSize=\"1.5rem\"\n        />{\" \"}\n        <CreateLobbyButton />{\" \"}\n        {currentLobbyJoinCode === lobby.joinCode ? (\n          <button\n            onClick={() => {\n              localStorage.setItem(\"currentLobbyJoinCode\", \"\");\n              setTimeout(() => {\n                window.location.reload();\n              }, 200);\n            }}\n          >\n            Detach lobby\n          </button>\n        ) : (\n          <button\n            onClick={() => {\n              localStorage.setItem(\"currentLobbyJoinCode\", lobby.joinCode);\n              setTimeout(() => {\n                window.location.reload();\n              }, 200);\n            }}\n          >\n            Attach lobby to session\n          </button>\n        )}\n      </h1>\n      <h3>Players</h3>\n      {lobby.users && (\n        <PlayerList\n          players={lobby.users}\n          userUuid={user && user.data && user.data.userUuid}\n        />\n      )}\n      {isPartOfLobby ? null : (\n        <button\n          onClick={async () => {\n            await JoinLobby({ apolloClient, joinCode: lobby.joinCode });\n          }}\n        >\n          Join lobby\n        </button>\n      )}\n      {/* <p>\n        Lobby invite code :{\" \"}\n        <Link\n          to={`/lobby/${lobby.joinCode}`}\n          style={{ color: \"white\", textDecoration: \"none\" }}\n          onClick={(e) => {\n            e.preventDefault();\n            navigator.clipboard.writeText(\n              `http://localhost:3000/lobby/${lobby.joinCode}`\n            );\n          }}\n        >\n          <span\n            className=\"join-code\"\n            style={{ fontSize: \"1.5rem\", textDecoration: \"underline\" }}\n          >\n            {lobby.joinCode}\n          </span>\n          <span style={{ textDecoration: \"none\" }}>\n            {\" \"}\n            <i className=\"fas fa-clipboard\" style={{ fontSize: \"1rem\" }} />\n          </span>\n        </Link>\n      </p> */}\n      {!isPartOfLobby || !lobby.games || lobby.games.length <= 0 ? null : (\n        <>\n          <h3>Games</h3>\n          <GameList\n            games={lobby.games}\n            userUuid={user && user.data && user.data.userUuid}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nconst PlayerList = ({ players, userUuid }) => {\n  const [sortedPlayers, setSortedPlayers] = useState(null);\n\n  useEffect(() => {\n    if (!players) return;\n    let newSortedPlayers = [...players];\n    newSortedPlayers.sort((a, b) => {\n      if (a.createdAt) {\n        if (!b.createdAt && b.createdAt < a.createdAt) return -1;\n        else return 1;\n      } else if (a.uuid) {\n        if (!b.uuid && b.uuid < a.uuid) return -1;\n        else return 1;\n      }\n      return 1;\n    });\n    setSortedPlayers(newSortedPlayers);\n  }, [players]);\n  if (!sortedPlayers) return null;\n  return sortedPlayers.map((player) => (\n    <PlayerItemDisplay key={player.uuid} player={player} userUuid={userUuid} />\n  ));\n};\n\nconst PlayerItemDisplay = ({ player, userUuid }) => {\n  return (\n    <>\n      <span>- {player.name}</span>\n      <br />\n    </>\n  );\n};\n\nconst GameList = ({ games, userUuid }) => {\n  const [sortedGames, setSortedGames] = useState(null);\n\n  useEffect(() => {\n    if (!games) return;\n    let newSortedGames = [...games];\n    newSortedGames.sort((a, b) => {\n      if (a.endAt) {\n        if (!b.endAt && b.endAt < a.endAt) return -1;\n        else return 1;\n      } else if (a.startAt) {\n        if (!b.startAt && b.startAt < a.startAt) return -1;\n        else return 1;\n      } else if (a.createdAt) {\n        if (!b.createdAt && b.createdAt < a.createdAt) return -1;\n        else return 1;\n      }\n      return 1;\n    });\n    setSortedGames(newSortedGames);\n  }, [games]);\n  if (!sortedGames) return null;\n  return (\n    <div>\n      {sortedGames.map((game) => (\n        <GameItemDisplay key={game.uuid} game={game} userUuid={userUuid} />\n      ))}\n    </div>\n  );\n};\n\nconst GameItemDisplay = ({ game, userUuid }) => {\n  const [tailDisplay, setTailDisplay] = useState(null);\n  const [isPartOfGame, setIsPartOfGame] = useState(null);\n  const apolloClient = useApolloClient();\n\n  const [sortedUsers, setSortedUsers] = useState([]);\n  useEffect(() => {\n    if (!game.users) {\n      setSortedUsers([]);\n      return;\n    }\n    let newSortedUsers = [...game.users];\n    newSortedUsers.sort((a, b) => {\n      return b.score !== a.score\n        ? b.score - a.score\n        : a.name.localeCompare(b.name);\n    });\n    setSortedUsers(newSortedUsers);\n  }, [game.users]);\n\n  useEffect(() => {\n    if (!game.users || !userUuid) return;\n    for (let i = 0; i < game.users.length; i++) {\n      if (game.users[i].uuid === userUuid) {\n        setIsPartOfGame(true);\n        return;\n      }\n    }\n    setIsPartOfGame(false);\n  }, [game.users, userUuid]);\n\n  useEffect(() => {\n    const gameEnded = game.endAt && new Date(+game.endAt) < new Date();\n    const gameStarted = game.startAt && new Date(+game.startAt) < new Date();\n\n    setTailDisplay(\n      <>\n        {!gameEnded && gameStarted && (\n          <>\n            <i className=\"fas fa-clock\" /> started{\" \"}\n            {millisecondsToStr(new Date() - new Date(+game.startAt))} ago{\" \"}\n          </>\n        )}\n        {!gameEnded && isPartOfGame && (\n          <Link\n            to={`/game/${game.joinCode}`}\n            style={{ color: \"#474747\", textDecoration: \"none\" }}\n          >\n            <button>View game</button>\n          </Link>\n        )}\n        {!gameEnded && !isPartOfGame && (\n          <button\n            onClick={async () => {\n              await JoinGame({ apolloClient, joinCode: game.joinCode });\n            }}\n          >\n            Join game\n          </button>\n        )}\n        {gameEnded && (\n          <span>\n            <i className=\"fas fa-trophy\" />{\" \"}\n            {sortedUsers\n              .slice(0, 3)\n              .map(\n                (gameUser, i) =>\n                  `${i + 1}. ${gameUser.name} (${gameUser.score})`\n              )\n              .join(\" \")}\n          </span>\n        )}\n      </>\n    );\n  }, [apolloClient, game, isPartOfGame, sortedUsers]);\n\n  return (\n    <div>\n      -{\" \"}\n      <LinkWithCopy localUrl={`/game/${game.joinCode}`} text={game.joinCode} />{\" \"}\n      <i className=\"fas fa-user-friends\" />{\" \"}\n      {!game.users ? 0 : game.users.length} <i className=\"fas fa-music\" />{\" \"}\n      {!game.tracks ? 0 : game.tracks.length} {tailDisplay}\n    </div>\n  );\n};\n\nconst LobbyEventProcessor = ({ lobby, refetch }) => {\n  const [_, notificationDispatch] = useNotificationContext();\n  const [user, __] = useUserContext();\n  const { data, loading } = useSubscription(\n    gql`\n      subscription OnLobbyEvent($lobbyUuid: ID) {\n        lobbyEvent(lobbyUuid: $lobbyUuid) {\n          kind\n          userUuid\n          userName\n        }\n      }\n    `,\n    {\n      variables: {\n        lobbyUuid: lobby.uuid,\n      },\n    }\n  );\n  useEffect(() => {\n    if (!data) return;\n    console.log({\n      event: \"lobbyEventProcessor.newEvent\",\n      kind: data.lobbyEvent ? data.lobbyEvent.kind : null,\n    });\n    let notificationConfig = null;\n    if (data.lobbyEvent) {\n      notificationConfig = {\n        type: \"default\",\n        message: `Event: ${data.lobbyEvent.kind}`,\n      };\n      switch (data.lobbyEvent.kind.toUpperCase()) {\n        case \"NEW_TRACKS\":\n          notificationConfig.message =\n            \"New tracks have been added to the lobby's track list !\";\n          break;\n        case \"USER_JOINED\":\n          if (data.lobbyEvent.userUuid == user.data.userUuid) {\n            notificationConfig = null;\n          } else {\n            notificationConfig.message = `${\n              data.lobbyEvent.userName || \"Someone\"\n            } joined the lobby !`;\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    if (notificationConfig) {\n      notificationDispatch({\n        action: \"SHOW_NOTIFICATION\",\n        notification: notificationConfig,\n      });\n    }\n    refetch();\n  }, [data, refetch, notificationDispatch]);\n\n  if (loading || !data || !data.lobbyEvent || !data.lobbyEvent.kind)\n    return null;\n  // return <p>Last event: {data.lobbyEvent.kind}</p>;\n  return null;\n};\n\nconst CreateLobbyButton = () => {\n  const [data, setData] = useState(null);\n  const [triggered, setTrigerred] = useState(false);\n  const button = (\n    <button\n      onClick={() => {\n        setData(<CreateLobby />);\n      }}\n    >\n      New lobby\n    </button>\n  );\n\n  return (\n    <>\n      {button}\n      {data}\n    </>\n  );\n};\n\nconst CreateLobby = ({ requestUid, shouldRedirect = true }) => {\n  const [rendered, setRendered] = useState(<p>Loading...</p>);\n  const apolloClient = useApolloClient();\n  const [user, userDispatch] = useUserContext();\n  console.log({ userUuid: user.data.userUuid });\n  useEffect(() => {\n    apolloClient\n      .mutate({\n        mutation: gql`\n          mutation CreateLobby($userUuidList: [String]) {\n            createLobby(userUuidList: $userUuidList) {\n              joinCode\n            }\n          }\n        `,\n        variables: {\n          userUuidList: [user.data.userUuid],\n        },\n      })\n      .then((data) => {\n        setRendered(JSON.stringify(data));\n        if (\n          shouldRedirect &&\n          data.data &&\n          data.data.createLobby &&\n          data.data.createLobby.joinCode\n        ) {\n          localStorage.setItem(\n            \"currentLobbyJoinCode\",\n            data.data.createLobby.joinCode\n          );\n          setRendered(\n            <Redirect to={`/lobby/${data.data.createLobby.joinCode}`} />\n          );\n        }\n      })\n      .catch((e) => {\n        setRendered(JSON.stringify(e));\n      });\n  }, [apolloClient, user, shouldRedirect]);\n\n  return <>{rendered}</>;\n};\n\nconst GamePrepareSection = ({ lobby }) => {\n  const [pickedPlaylistUuid, setPickedPlaylistUuid] = useState(null);\n  const apolloClient = useApolloClient();\n\n  let startSection = null;\n  if (\n    lobby.nextGameSettings &&\n    lobby.nextGameSettings.tracksToGuess &&\n    lobby.nextGameSettings.trackList &&\n    lobby.nextGameSettings.trackList.length >=\n      lobby.nextGameSettings.tracksToGuess\n  ) {\n    startSection = (\n      <button\n        onClick={async () => {\n          await CreateGameFromLobby({\n            apolloClient,\n            lobby,\n          });\n        }}\n      >\n        Create game\n      </button>\n    );\n  }\n  return (\n    <>\n      {!lobby.nextGameSettings ? null : (\n        <>\n          <h3>Create new game</h3>\n          <div>\n            Settings: <i className=\"fas fa-music\" />{\" \"}\n            {lobby.nextGameSettings.tracksToGuess} tracks to guess\n            <br />\n            Game playlist:{\" \"}\n            {lobby.nextGameSettings.trackList\n              ? lobby.nextGameSettings.trackList.length\n              : 0}{\" \"}\n            total selected tracks.\n            <br />\n            Add tracks from a playlist: &nbsp;\n            <PlaylistPicker\n              setPickedPlaylistUuid={setPickedPlaylistUuid}\n              lobbyUuid={lobby.uuid}\n            />{\" \"}\n            <br />\n            Add tracks in common between all lobby members:{\" \"}\n            <button\n              onClick={() => {\n                AddFriendsMatchToLobbyTracks({\n                  apolloClient,\n                  lobbyUuid: lobby.uuid,\n                });\n              }}\n            >\n              Add common tracks\n            </button>\n          </div>\n        </>\n      )}\n      <p></p>\n      {startSection}\n    </>\n  );\n};\n\nconst PlaylistPicker = ({ setPickedPlaylistUuid, lobbyUuid }) => {\n  const apolloClient = useApolloClient();\n  const [searchResults, setSearchResults] = useState(null);\n  const [selectedItem, setSelectedItem] = useState(null);\n  const [updateSearchResultsTimeout, setUpdateSearchResultsTimeout] = useState(\n    null\n  );\n  const inputRef = useRef(null);\n  const updateSearchResults = (query) => {\n    console.log({ msg: \"triggering search results update\" });\n    apolloClient\n      .query({\n        query: gql`\n          query SearchPlaylists($query: String) {\n            searchPlaylists(query: $query) {\n              uuid\n              name\n              pictureUrl\n            }\n          }\n        `,\n        variables: {\n          query,\n        },\n      })\n      .then((data) => setSearchResults(data.data.searchPlaylists))\n      .catch((error) =>\n        console.log({ msg: \"error searching playlists\", error })\n      );\n  };\n\n  useEffect(() => {\n    if (!selectedItem || !selectedItem.uuid) {\n      setPickedPlaylistUuid(null);\n      return;\n    }\n    setPickedPlaylistUuid(selectedItem.uuid);\n  }, [selectedItem, setPickedPlaylistUuid]);\n\n  return (\n    <form\n      style={{ display: \"inline\" }}\n      onSubmit={(e) => {\n        e.preventDefault();\n        if (\n          inputRef.current.value.indexOf(\n            \"https://open.spotify.com/playlist/\" != -1\n          )\n        ) {\n          AddPlaylistToLobbyTracks({\n            apolloClient,\n            playlistUuid: inputRef.current.value,\n            lobbyUuid: lobbyUuid,\n          });\n        }\n      }}\n    >\n      <input\n        type=\"text\"\n        name=\"search\"\n        autoComplete=\"off\"\n        placeholder=\"Playlist name or URL\"\n        ref={inputRef}\n        onChange={(e) => {\n          if (updateSearchResultsTimeout) {\n            clearTimeout(updateSearchResultsTimeout);\n          }\n          setUpdateSearchResultsTimeout(\n            setTimeout(() => {\n              updateSearchResults(e.target.value);\n            }, 250)\n          );\n        }}\n        style={{ outline: \"none\" }}\n      />\n      {!selectedItem ? (\n        !searchResults || searchResults.length <= 0 ? null : (\n          <>\n            <h4>Select a playlist:</h4>\n            <ul className=\"search-result__list\">\n              {searchResults.map((result) => (\n                <li\n                  className=\"search-result__item\"\n                  onClick={async () => {\n                    await AddPlaylistToLobbyTracks({\n                      apolloClient,\n                      playlistUuid: result.uuid,\n                      lobbyUuid,\n                    });\n                    setSearchResults([]);\n                    inputRef.current.value = \"\";\n                    // setSelectedItem(result);\n                  }}\n                >\n                  {/* <img\n                    src={result.pictureUrl}\n                    style={{ width: \"4rem\", marginRight: \"0.5rem\" }}\n                    alt=\"\"\n                  /> */}\n                  {result.name}\n                </li>\n              ))}\n            </ul>\n          </>\n        )\n      ) : (\n        <p>\n          Selected: {selectedItem.name}{\" \"}\n          <button\n            onClick={() => {\n              setSelectedItem(null);\n            }}\n          >\n            Change\n          </button>\n        </p>\n      )}\n    </form>\n  );\n};\n\nconst JoinLobby = async ({ apolloClient, joinCode }) => {\n  return await apolloClient.mutate({\n    mutation: gql`\n      mutation JoinLobby($joinCode: String!) {\n        joinLobby(joinCode: $joinCode) {\n          uuid\n          name\n        }\n      }\n    `,\n    variables: {\n      joinCode,\n    },\n  });\n};\n\nconst JoinGame = async ({ apolloClient, joinCode }) => {\n  return await apolloClient.mutate({\n    mutation: gql`\n      mutation JoinGame($joinCode: String!) {\n        joinGame(joinCode: $joinCode) {\n          uuid\n          name\n        }\n      }\n    `,\n    variables: {\n      joinCode,\n    },\n  });\n};\n\nconst CreateGameFromLobby = async ({ apolloClient, lobby }) => {\n  return await apolloClient.mutate({\n    mutation: gql`\n      mutation CreateGameFromSettings(\n        $userUuidList: [ID]\n        $gameSettingsUuid: ID\n        $lobbyUuid: ID\n      ) {\n        createGameFromSettings(\n          userUuidList: $userUuidList\n          gameSettingsUuid: $gameSettingsUuid\n          lobbyUuid: $lobbyUuid\n        ) {\n          uuid\n          joinCode\n        }\n      }\n    `,\n    variables: {\n      gameSettingsUuid: lobby.nextGameSettings.uuid,\n      lobbyUuid: lobby.uuid,\n      userUuidList: lobby.users.map((user) => user.uuid),\n    },\n  });\n};\n\nconst AddPlaylistToLobbyTracks = async ({\n  apolloClient,\n  playlistUuid,\n  lobbyUuid,\n}) => {\n  return await apolloClient.mutate({\n    mutation: gql`\n      mutation PlaylistToLobbyTracks($playlistUuid: ID, $lobbyUuid: ID) {\n        playlistToLobbyTracks(\n          playlistUuid: $playlistUuid\n          lobbyUuid: $lobbyUuid\n        ) {\n          name\n        }\n      }\n    `,\n    variables: {\n      playlistUuid,\n      lobbyUuid,\n    },\n  });\n};\n\nconst AddFriendsMatchToLobbyTracks = async ({ apolloClient, lobbyUuid }) => {\n  return await apolloClient.mutate({\n    mutation: gql`\n      mutation FriendsMatchToLobbyTracks($lobbyUuid: ID) {\n        friendsMatchToLobbyTracks(lobbyUuid: $lobbyUuid) {\n          name\n        }\n      }\n    `,\n    variables: {\n      lobbyUuid,\n    },\n  });\n};\n\nfunction millisecondsToStr(milliseconds) {\n  // TIP: to find current time in milliseconds, use:\n  // var  current_time_milliseconds = new Date().getTime();\n\n  function numberEnding(number) {\n    return number > 1 ? \"s\" : \"\";\n  }\n\n  var temp = Math.floor(milliseconds / 1000);\n  var years = Math.floor(temp / 31536000);\n  if (years) {\n    return years + \" year\" + numberEnding(years);\n  }\n  //TODO: Months! Maybe weeks?\n  var days = Math.floor((temp %= 31536000) / 86400);\n  if (days) {\n    return days + \" day\" + numberEnding(days);\n  }\n  var hours = Math.floor((temp %= 86400) / 3600);\n  if (hours) {\n    return hours + \" hour\" + numberEnding(hours);\n  }\n  var minutes = Math.floor((temp %= 3600) / 60);\n  if (minutes) {\n    return minutes + \" minute\" + numberEnding(minutes);\n  }\n  var seconds = temp % 60;\n  if (seconds) {\n    return seconds + \" second\" + numberEnding(seconds);\n  }\n  return \"less than a second\"; //'just now' //or other string you like;\n}\n","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/molecules/LobbyHeader/index.js",["145"],"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/molecules/GameManager/index.js",["146","147","148","149","150","151","152","153","154"],"import {\n  useApolloClient,\n  gql,\n  useSubscription,\n  useQuery,\n} from \"@apollo/client\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useParams, Redirect, Link } from \"react-router-dom\";\nimport useUserContext from \"../../UserContext\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport Countdown from \"react-countdown\";\nimport useGameNotificationContext from \"../../contexts/GameNotificationContext\";\nimport { GameNotificationProvider } from \"../../contexts/GameNotificationContext/GameNotificationContext\";\nimport { Line, Circle } from \"rc-progress\";\nimport { v4 as uuid } from \"uuid\";\n\nimport \"./style.scss\";\n\nconst gameNotificationReducer = (state, payload) => {\n  switch (payload.action) {\n    case \"SHOW_NOTIFICATION\": {\n      return { data: payload.notification };\n    }\n\n    case \"HIDE_NOTIFICATION\": {\n      return { data: null };\n    }\n\n    default: {\n      return { ...state };\n    }\n  }\n};\n\nexport default function Component({ defaultJoinCode }) {\n  const params = useParams();\n  const [rendered, setRendered] = useState(<p>Loading...</p>);\n  const [joinCode, setJoinCode] = useState(defaultJoinCode);\n\n  useEffect(() => {\n    if (params.joinCode) {\n      setJoinCode(params.joinCode);\n    }\n  }, [params]);\n\n  if (!joinCode) return <p>Missing join code</p>;\n  return (\n    <div>\n      <GameController joinCode={joinCode} />\n    </div>\n  );\n}\n\nconst GameController = ({ joinCode }) => {\n  const { data, loading, error, refetch } = useQuery(\n    gql`\n      query Game($joinCode: String!) {\n        game(joinCode: $joinCode) {\n          uuid\n          joinCode\n          currentTrackIndex\n          nextTrackAt\n          endAt\n          users {\n            uuid\n            name\n            score\n          }\n          tracks {\n            name\n            previewUrl\n            artists {\n              name\n            }\n          }\n          lobby {\n            joinCode\n          }\n        }\n      }\n    `,\n    {\n      variables: {\n        joinCode: joinCode,\n      },\n      fetchPolicy: \"no-cache\",\n    }\n  );\n\n  if (loading || !data) return <p>Loading...</p>;\n  if (error)\n    return (\n      <>\n        <p>{JSON.stringify(error)}</p>\n      </>\n    );\n\n  return (\n    <>\n      <GameNotificationProvider>\n        <GameDisplay game={data.game} refetch={refetch} />\n        <GameEventProcessor game={data.game} refetch={refetch} />\n      </GameNotificationProvider>\n    </>\n  );\n};\n\nexport const ScoreDisplay = ({ users }) => {\n  const [sortedUsers, setSortedUsers] = useState([]);\n  useEffect(() => {\n    if (!users) {\n      setSortedUsers([]);\n      return;\n    }\n    let newSortedUsers = [...users];\n    newSortedUsers.sort((a, b) => {\n      return b.score !== a.score\n        ? b.score - a.score\n        : a.name.localeCompare(b.name);\n    });\n    setSortedUsers(newSortedUsers);\n  }, [users]);\n  return (\n    <>\n      <h3>Scores</h3>\n      {sortedUsers &&\n        sortedUsers.map((user) => (\n          <p key={user.uuid}>\n            <i className=\"fas fa-star\" /> {user.score} {user.name}\n          </p>\n        ))}\n    </>\n  );\n};\n\nexport const StartGameSection = ({ game }) => {\n  const apolloClient = useApolloClient();\n  return (\n    <div className=\"game-manager__start-section\">\n      <h3>Game ready</h3>\n      <p>Click below to start.</p>\n      <button\n        className=\"game-manager__start-button\"\n        onClick={async () => {\n          await StartGame({ apolloClient, gameUuid: game.uuid });\n        }}\n      >\n        Start game\n      </button>\n    </div>\n  );\n};\n\nexport const EndGameSection = ({ game }) => {\n  const backToLobby =\n    game.lobby && game.lobby.joinCode ? (\n      <Link\n        to={`/lobby/${game.lobby.joinCode}`}\n        style={{ color: \"white\", textDecoration: \"none\" }}\n      >\n        <i className=\"fas fa-arrow-circle-left\" /> Return to lobby\n      </Link>\n    ) : null;\n  return (\n    <div className=\"game-manager__finished-section\">\n      <ScoreDisplay users={game.users} />\n      {backToLobby}\n    </div>\n  );\n};\n\nconst GameOngoingDisplay = ({ game }) => {\n  const apolloClient = useApolloClient();\n  const [answerInputValue, setAnswerInputValue] = useState(\"\");\n\n  useEffect(() => {\n    setAnswerInputValue(\"\");\n  }, [game.currentTrackIndex]);\n\n  return (\n    <>\n      <ScoreDisplay users={game.users} />\n      <div className=\"game-manager__section\">\n        <TrackPreview\n          previewUrl={game.tracks[game.currentTrackIndex].previewUrl}\n        />\n        <p className=\"game-manager__progress-text\">\n          Track n°{game.currentTrackIndex + 1}{\" \"}\n          <CountdownCircle nextTrackAt={game.nextTrackAt} />\n        </p>\n\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n            try {\n              await proposeAnswer({\n                apolloClient,\n                answerText: answerInputValue,\n                gameUuid: game.uuid,\n                trackIndex: game.currentTrackIndex,\n              });\n            } catch (e) {\n              if (\n                e.message === \"WRONG_TRACK_INDEX\" ||\n                e.message === \"ALREADY_ANSWERED\"\n              ) {\n                window.location.reload();\n              } else {\n                throw e;\n              }\n            }\n            setAnswerInputValue(\"\");\n          }}\n        >\n          <input\n            type=\"text\"\n            placeholder=\"Make a guess\"\n            value={answerInputValue}\n            onChange={(e) => {\n              setAnswerInputValue(e.target.value);\n            }}\n            className=\"game-manager__input\"\n            autoComplete=\"off\"\n            style={{ outline: \"none\" }}\n          />\n        </form>\n      </div>\n    </>\n  );\n};\n\nconst GameDisplay = ({ game, refetch }) => {\n  const apolloClient = useApolloClient();\n  const [gameFlowSection, setGameFlowSection] = useState(null);\n\n  // useEffect(() => {\n  //   const interval = setInterval(() => {\n  //     setForceRefreshToken(Date.now());\n  //   }, 1000);\n  //   return () => clearInterval(interval);\n  // }, []);\n\n  useEffect(() => {\n    if (!game) return;\n    const gameEnded = game.endAt && new Date(+game.endAt) < Date.now();\n    if (\n      !gameEnded &&\n      game.nextTrackAt &&\n      new Date(+game.nextTrackAt) < Date.now()\n    ) {\n      refetch();\n    }\n    if (game.currentTrackIndex < 0) {\n      setGameFlowSection(<StartGameSection game={game} />);\n    } else if (game.currentTrackIndex >= 0 && game.nextTrackAt && !gameEnded) {\n      setGameFlowSection(<GameOngoingDisplay game={game} />);\n    } else {\n      setGameFlowSection(<EndGameSection game={game} />);\n    }\n  }, [game, apolloClient, refetch]);\n  if (!game) return null;\n\n  return <div className=\"game__section\">{gameFlowSection}</div>;\n};\n\nconst CountdownCircle = ({ nextTrackAt }) => {\n  const [refreshKey, setRefreshKey] = useState(\"\");\n  const [originalRemainingTime, setOriginalRemainingTime] = useState(null);\n\n  useEffect(() => {\n    if (nextTrackAt)\n      setOriginalRemainingTime(new Date(+nextTrackAt) - new Date());\n  }, [nextTrackAt]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setRefreshKey(uuid());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const diffCoeff = Math.max(\n    1 - (new Date(+nextTrackAt) - new Date()) / originalRemainingTime,\n    0\n  );\n  return (\n    <Circle\n      refresh={refreshKey}\n      className=\"game-manager__progress-circle\"\n      percent={diffCoeff * 100}\n      strokeWidth={10}\n      strokeColor={`rgb(${255 - diffCoeff * 10},${\n        255 - Math.pow(diffCoeff, 2) * 200\n      },${255 - Math.pow(diffCoeff, 2) * 200})`}\n    />\n  );\n};\n\nconst AutoHide = ({ children, delayMs }) => {\n  const [shouldDisplay, setShouldDisplay] = useState(true);\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldDisplay(false);\n    }, delayMs);\n  }, [setShouldDisplay, delayMs]);\n  if (!shouldDisplay) return null;\n  return children;\n};\n\nconst proposeAnswer = async ({\n  apolloClient,\n  gameUuid,\n  trackIndex,\n  answerText,\n}) => {\n  if (answerText.trim().length <= 0) return;\n  try {\n    const resp = await apolloClient.mutate({\n      mutation: gql`\n        mutation ProposeAnswer(\n          $gameUuid: ID\n          $trackIndex: Int\n          $answerText: String\n        ) {\n          proposeAnswer(\n            gameUuid: $gameUuid\n            trackIndex: $trackIndex\n            answerText: $answerText\n          )\n        }\n      `,\n      variables: {\n        gameUuid,\n        trackIndex,\n        answerText,\n      },\n    });\n    return resp;\n  } catch (e) {\n    throw e;\n  }\n};\n\nconst GameEventProcessor = ({ game, refetch }) => {\n  const [\n    gameNotification,\n    gameNotificationDispatch,\n  ] = useGameNotificationContext();\n  const { data, loading } = useSubscription(\n    gql`\n      subscription OnGameEvent($gameUuid: ID) {\n        gameEvent(gameUuid: $gameUuid) {\n          kind\n          userName\n          answeredBy\n          answerText\n        }\n      }\n    `,\n    {\n      variables: {\n        gameUuid: game.uuid,\n      },\n    }\n  );\n  useEffect(() => {\n    if (!data || !data.gameEvent || !data.gameEvent) return;\n    console.log({\n      event: \"gameEventProcessor.newEvent\",\n      kind: data.gameEvent ? data.gameEvent.kind : null,\n    });\n    let notificationConfig = {\n      type: \"default\",\n      message: \"\",\n    };\n    const kind = data.gameEvent.kind ? data.gameEvent.kind.toUpperCase() : null;\n    switch (kind) {\n      case \"ANSWER_ACCEPTED\":\n        notificationConfig.type = \"success\";\n        notificationConfig.message = (\n          <span>\n            <span className=\"game-notification__content--username\">\n              {data.gameEvent.userName || \"Someone\"}\n            </span>\n            <br />\n            guessed {game.tracks[game.currentTrackIndex].name} by{\" \"}\n            {game.tracks[game.currentTrackIndex].artists\n              .map((artist) => artist.name)\n              .join(\" & \")}{\" \"}\n            !\n          </span>\n        );\n        break;\n      case \"ANSWER_REJECTED\":\n        notificationConfig.type = \"error\";\n        notificationConfig.message = (\n          <span>\n            <span className=\"game-notification__content--username\">\n              {data.gameEvent.answerText}\n            </span>\n            <br />\n            is wrong !{\" \"}\n            {data.gameEvent.userName ? `(${data.gameEvent.userName})` : null}\n          </span>\n        );\n        break;\n      case \"GAME_FINISHED\":\n        notificationConfig.type = \"default\";\n        notificationConfig.message = (\n          <span className=\"game-notification__content--fullheight\">\n            Game finished !\n          </span>\n        );\n        break;\n      case \"NEXT_TRACK\":\n        setTimeout(() => {\n          refetch();\n        }, new Date(+game.nextTrackAt) - new Date() + 200);\n        console.log({ msg: \"next track\" });\n        if (game.currentTrackIndex === -1) {\n          notificationConfig = null;\n          break;\n        }\n        if (data.gameEvent.answeredBy) {\n          notificationConfig.type = \"success\";\n          notificationConfig.message = (\n            <span>\n              <span className=\"game-notification__content--username\">\n                {game.tracks[game.currentTrackIndex].name} by{\" \"}\n                {game.tracks[game.currentTrackIndex].artists\n                  .map((artist) => artist.name)\n                  .join(\" & \")}{\" \"}\n              </span>\n              <br />\n              guessed by {data.gameEvent.answeredBy || \"Someone\"}\n            </span>\n          );\n        } else {\n          notificationConfig.type = \"default\";\n          notificationConfig.message = (\n            <span>\n              <span className=\"game-notification__content--username\">\n                {game.tracks[game.currentTrackIndex].name} by{\" \"}\n                {game.tracks[game.currentTrackIndex].artists\n                  .map((artist) => artist.name)\n                  .join(\" & \")}\n              </span>\n              <br />\n              No one found the answer !\n            </span>\n          );\n        }\n        break;\n      default:\n        notificationConfig.type = \"success\";\n        notificationConfig.message = data.gameEvent.kind;\n        break;\n    }\n    refetch();\n    if (notificationConfig) {\n      gameNotificationDispatch({\n        action: \"SHOW_NOTIFICATION\",\n        notification: notificationConfig,\n      });\n      setTimeout(() => {\n        gameNotificationDispatch({\n          action: \"HIDE_NOTIFICATION\",\n        });\n      }, 6000);\n    }\n  }, [data, refetch, gameNotificationDispatch]);\n  const notificationRef = useRef(null);\n\n  if (loading || !data || !data.gameEvent || !data.gameEvent.kind) return null;\n  return (\n    <>\n      <div className={`game-notification__display`}>\n        {gameNotification.notifications &&\n          gameNotification.notifications.map((notification) => (\n            <div\n              className={`game-notification__item game-notification__item--${notification.type}`}\n              ref={notificationRef}\n              key={notification.uid}\n            >\n              {notification.message}\n            </div>\n          ))}\n      </div>\n      {/* <p>Last event: {data.gameEvent.kind}</p> */}\n    </>\n  );\n};\n\nfunction TrackPreview({ previewUrl, autoPlay = true }) {\n  return (\n    <>\n      <ReactAudioPlayer src={previewUrl} autoPlay={autoPlay} />\n    </>\n  );\n}\n\nconst StartGame = async ({ apolloClient, gameUuid }) => {\n  return await apolloClient.mutate({\n    mutation: gql`\n      mutation StartGame($gameUuid: ID) {\n        startGame(gameUuid: $gameUuid)\n      }\n    `,\n    variables: {\n      gameUuid,\n    },\n  });\n};\n","/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/contexts/NotificationContext/index.js",[],"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/contexts/NotificationContext/NotificationContext.js",[],"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/contexts/GameNotificationContext/GameNotificationContext.js",[],"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/contexts/GameNotificationContext/index.js",[],"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/components/atoms/LinkWithCopy/index.js",[],"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/pages/signup/index.js",["155"],"/Users/snwfdhmp/Dev/workspaces/projects/blindtest/src/front/src/pages/signup/graphql.js",[],{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":10,"column":8,"nodeType":"162","messageId":"163","endLine":10,"endColumn":16},{"ruleId":"160","severity":1,"message":"164","line":11,"column":8,"nodeType":"162","messageId":"163","endLine":11,"endColumn":16},{"ruleId":"165","severity":1,"message":"166","line":62,"column":41,"nodeType":"167","messageId":"168","endLine":62,"endColumn":43},{"ruleId":"160","severity":1,"message":"169","line":159,"column":16,"nodeType":"162","messageId":"163","endLine":159,"endColumn":17},{"ruleId":"160","severity":1,"message":"170","line":206,"column":10,"nodeType":"162","messageId":"163","endLine":206,"endColumn":14},{"ruleId":"160","severity":1,"message":"171","line":19,"column":36,"nodeType":"162","messageId":"163","endLine":19,"endColumn":43},{"ruleId":"160","severity":1,"message":"172","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":14},{"ruleId":"160","severity":1,"message":"173","line":4,"column":8,"nodeType":"162","messageId":"163","endLine":4,"endColumn":20},{"ruleId":"160","severity":1,"message":"174","line":20,"column":16,"nodeType":"162","messageId":"163","endLine":20,"endColumn":23},{"ruleId":"160","severity":1,"message":"175","line":23,"column":34,"nodeType":"162","messageId":"163","endLine":23,"endColumn":59},{"ruleId":"176","severity":1,"message":"177","line":68,"column":62,"nodeType":"178","messageId":"179","endLine":68,"endColumn":64},{"ruleId":"160","severity":1,"message":"180","line":129,"column":10,"nodeType":"162","messageId":"163","endLine":129,"endColumn":22},{"ruleId":"160","severity":1,"message":"171","line":130,"column":36,"nodeType":"162","messageId":"163","endLine":130,"endColumn":43},{"ruleId":"160","severity":1,"message":"181","line":11,"column":16,"nodeType":"162","messageId":"163","endLine":11,"endColumn":28},{"ruleId":"160","severity":1,"message":"182","line":22,"column":10,"nodeType":"162","messageId":"163","endLine":22,"endColumn":15},{"ruleId":"160","severity":1,"message":"183","line":23,"column":10,"nodeType":"162","messageId":"163","endLine":23,"endColumn":14},{"ruleId":"160","severity":1,"message":"170","line":25,"column":10,"nodeType":"162","messageId":"163","endLine":25,"endColumn":14},{"ruleId":"160","severity":1,"message":"184","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":19},{"ruleId":"160","severity":1,"message":"184","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":19},{"ruleId":"160","severity":1,"message":"185","line":1,"column":27,"nodeType":"162","messageId":"163","endLine":1,"endColumn":36},{"ruleId":"160","severity":1,"message":"186","line":4,"column":17,"nodeType":"162","messageId":"163","endLine":4,"endColumn":25},{"ruleId":"160","severity":1,"message":"187","line":17,"column":10,"nodeType":"162","messageId":"163","endLine":17,"endColumn":18},{"ruleId":"160","severity":1,"message":"188","line":17,"column":20,"nodeType":"162","messageId":"163","endLine":17,"endColumn":31},{"ruleId":"160","severity":1,"message":"169","line":119,"column":16,"nodeType":"162","messageId":"163","endLine":119,"endColumn":17},{"ruleId":"160","severity":1,"message":"169","line":378,"column":10,"nodeType":"162","messageId":"163","endLine":378,"endColumn":11},{"ruleId":"160","severity":1,"message":"189","line":379,"column":16,"nodeType":"162","messageId":"163","endLine":379,"endColumn":18},{"ruleId":"165","severity":1,"message":"166","line":414,"column":40,"nodeType":"167","messageId":"168","endLine":414,"endColumn":42},{"ruleId":"190","severity":1,"message":"191","line":433,"column":6,"nodeType":"192","endLine":433,"endColumn":43,"suggestions":"193"},{"ruleId":"160","severity":1,"message":"194","line":443,"column":10,"nodeType":"162","messageId":"163","endLine":443,"endColumn":19},{"ruleId":"160","severity":1,"message":"195","line":443,"column":21,"nodeType":"162","messageId":"163","endLine":443,"endColumn":33},{"ruleId":"160","severity":1,"message":"181","line":465,"column":16,"nodeType":"162","messageId":"163","endLine":465,"endColumn":28},{"ruleId":"160","severity":1,"message":"196","line":507,"column":10,"nodeType":"162","messageId":"163","endLine":507,"endColumn":28},{"ruleId":"165","severity":1,"message":"197","line":618,"column":50,"nodeType":"167","messageId":"168","endLine":618,"endColumn":52},{"ruleId":"160","severity":1,"message":"169","line":11,"column":16,"nodeType":"162","messageId":"163","endLine":11,"endColumn":17},{"ruleId":"160","severity":1,"message":"198","line":8,"column":21,"nodeType":"162","messageId":"163","endLine":8,"endColumn":29},{"ruleId":"160","severity":1,"message":"199","line":9,"column":8,"nodeType":"162","messageId":"163","endLine":9,"endColumn":22},{"ruleId":"160","severity":1,"message":"200","line":11,"column":8,"nodeType":"162","messageId":"163","endLine":11,"endColumn":17},{"ruleId":"160","severity":1,"message":"201","line":14,"column":10,"nodeType":"162","messageId":"163","endLine":14,"endColumn":14},{"ruleId":"160","severity":1,"message":"202","line":19,"column":7,"nodeType":"162","messageId":"163","endLine":19,"endColumn":30},{"ruleId":"160","severity":1,"message":"187","line":37,"column":10,"nodeType":"162","messageId":"163","endLine":37,"endColumn":18},{"ruleId":"160","severity":1,"message":"188","line":37,"column":20,"nodeType":"162","messageId":"163","endLine":37,"endColumn":31},{"ruleId":"160","severity":1,"message":"203","line":299,"column":7,"nodeType":"162","messageId":"163","endLine":299,"endColumn":15},{"ruleId":"190","severity":1,"message":"204","line":471,"column":6,"nodeType":"192","endLine":471,"endColumn":47,"suggestions":"205"},{"ruleId":"160","severity":1,"message":"206","line":1,"column":17,"nodeType":"162","messageId":"163","endLine":1,"endColumn":25},"no-native-reassign",["207"],"no-negated-in-lhs",["208"],"no-unused-vars","'RootPage' is defined but never used.","Identifier","unusedVar","'GamePage' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'_' is assigned a value but never used.","'user' is assigned a value but never used.","'refetch' is assigned a value but never used.","'Link' is defined but never used.","'LobbyManager' is defined but never used.","'setMode' is assigned a value but never used.","'setNotificationsToDisplay' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'PlaylistList' is defined but never used.","'userDispatch' is assigned a value but never used.","'error' is assigned a value but never used.","'done' is assigned a value but never used.","'useParams' is defined but never used.","'useEffect' is defined but never used.","'setUsers' is assigned a value but never used.","'rendered' is assigned a value but never used.","'setRendered' is assigned a value but never used.","'__' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user.data.userUuid'. Either include it or remove the dependency array.","ArrayExpression",["209"],"'triggered' is assigned a value but never used.","'setTrigerred' is assigned a value but never used.","'pickedPlaylistUuid' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'Redirect' is defined but never used.","'useUserContext' is defined but never used.","'Countdown' is defined but never used.","'Line' is defined but never used.","'gameNotificationReducer' is assigned a value but never used.","'AutoHide' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'game.currentTrackIndex', 'game.nextTrackAt', and 'game.tracks'. Either include them or remove the dependency array.",["210"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},"Update the dependencies array to be: [data, refetch, notificationDispatch, user.data.userUuid]",{"range":"215","text":"216"},"Update the dependencies array to be: [data, refetch, gameNotificationDispatch, game.tracks, game.currentTrackIndex, game.nextTrackAt]",{"range":"217","text":"218"},[11337,11374],"[data, refetch, notificationDispatch, user.data.userUuid]",[12471,12512],"[data, refetch, gameNotificationDispatch, game.tracks, game.currentTrackIndex, game.nextTrackAt]"]